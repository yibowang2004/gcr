// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// log_mat
Eigen::MatrixXd log_mat(const Eigen::MatrixXd& R);
RcppExport SEXP _gcr_log_mat(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(log_mat(R));
    return rcpp_result_gen;
END_RCPP
}
// exp_mat
Eigen::MatrixXd exp_mat(const Eigen::MatrixXd& R);
RcppExport SEXP _gcr_exp_mat(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_mat(R));
    return rcpp_result_gen;
END_RCPP
}
// exp_solve_mat
Eigen::MatrixXd exp_solve_mat(const Eigen::MatrixXd& R);
RcppExport SEXP _gcr_exp_solve_mat(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_solve_mat(R));
    return rcpp_result_gen;
END_RCPP
}
// exp_sqrt_solve_mat
Eigen::MatrixXd exp_sqrt_solve_mat(const Eigen::MatrixXd& R);
RcppExport SEXP _gcr_exp_sqrt_solve_mat(SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_sqrt_solve_mat(R));
    return rcpp_result_gen;
END_RCPP
}
// generate_J
NumericMatrix generate_J(NumericMatrix R_solve);
RcppExport SEXP _gcr_generate_J(SEXP R_solveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type R_solve(R_solveSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_J(R_solve));
    return rcpp_result_gen;
END_RCPP
}
// generate_J_extra
NumericMatrix generate_J_extra(NumericMatrix R_solve, NumericMatrix R_sqrt_solve, NumericVector a_d4, NumericVector a_d2, double phi);
RcppExport SEXP _gcr_generate_J_extra(SEXP R_solveSEXP, SEXP R_sqrt_solveSEXP, SEXP a_d4SEXP, SEXP a_d2SEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type R_solve(R_solveSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type R_sqrt_solve(R_sqrt_solveSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_d4(a_d4SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a_d2(a_d2SEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_J_extra(R_solve, R_sqrt_solve, a_d4, a_d2, phi));
    return rcpp_result_gen;
END_RCPP
}
// generate_Mid
NumericMatrix generate_Mid(NumericVector lambda);
RcppExport SEXP _gcr_generate_Mid(SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_Mid(lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gcr_log_mat", (DL_FUNC) &_gcr_log_mat, 1},
    {"_gcr_exp_mat", (DL_FUNC) &_gcr_exp_mat, 1},
    {"_gcr_exp_solve_mat", (DL_FUNC) &_gcr_exp_solve_mat, 1},
    {"_gcr_exp_sqrt_solve_mat", (DL_FUNC) &_gcr_exp_sqrt_solve_mat, 1},
    {"_gcr_generate_J", (DL_FUNC) &_gcr_generate_J, 1},
    {"_gcr_generate_J_extra", (DL_FUNC) &_gcr_generate_J_extra, 5},
    {"_gcr_generate_Mid", (DL_FUNC) &_gcr_generate_Mid, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_gcr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
